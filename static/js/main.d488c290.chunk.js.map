{"version":3,"sources":["Context/GKContextApi.js","Components/GKbodyElements.js","Components/GKbody.js","Components/GKElements.js","Components/index.js","GlobalElements.js","App.js","reportWebVitals.js","index.js"],"names":["GKContext","createContext","GKContextApi","children","useState","country","setCountry","err","setErr","useEffect","axios","get","then","res","data","catch","Provider","value","GKBodyContainer","styled","div","GkBodyWrapper","GKFlag","img","GKInfo","GKText","p","GKBorder","span","GKbody","src","flag","altSpellings","length","capital","languages","name","currencies","symbol","callingCodes","region","area","toLocaleString","className","borders","map","key","topLevelDomain","timezones","GKContainer","GKHeader","GKTitle","h2","GKWrapper","GKHero","GKInput","input","GKDataList","datalist","GKoption","option","GKInterface","useContext","setName","country_name","setContry_name","console","clear","list","placeholder","onChange","e","preventDefault","target","id","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d488c290.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\n//Initilize Context Api\r\nexport const GKContext = createContext()\r\n\r\nconst GKContextApi = ({children}) => {\r\n \r\n const [country, setCountry] = useState([])\r\n const [err, setErr] = useState('')\r\n \r\n // Get The all conutry info with API\r\n useEffect(() =>{\r\n  axios.get(`https://restcountries.eu/rest/v2/all`)\r\n  .then( res => {\r\n   setCountry(res.data);\r\n  })\r\n  .catch( err => {\r\n   setErr(\"Something went wrong\")\r\n  } )\r\n }, [setCountry])\r\n\r\n return (\r\n <GKContext.Provider value={{ country, err }}>\r\n  {children}\r\n </GKContext.Provider>\r\n )\r\n}\r\n\r\nexport default GKContextApi\r\n","import styled from 'styled-components';\r\n\r\nexport const GKBodyContainer = styled.div`\r\n background: #34495e;\r\n text-align: left;\r\n padding: 2rem 2rem 1rem;\r\n`;\r\n\r\nexport const GkBodyWrapper = styled.div``\r\n\r\nexport const GKFlag = styled.img`\r\nwidth: 100%;\r\nheight: 200px;\r\nobject-fit: cover;\r\n`;\r\n\r\nexport const GKInfo = styled.div``\r\n\r\nexport const GKText = styled.p`\r\nfont-size: 15px;\r\ncolor: #fff;\r\nmargin-bottom: 1rem;\r\nletter-spacing: 0.8px;\r\noverflow-x: auto;\r\n\r\n`\r\nexport const GKBorder = styled.span`\r\n display: flex;\r\n text-align: center\r\n font-weight: normal !important;\r\n`;","import React from 'react';\r\nimport {\r\n GKBodyContainer,\r\n GKFlag,\r\n GkBodyWrapper,\r\n GKInfo,\r\n GKText,\r\n GKBorder\r\n} from './GKbodyElements';\r\n\r\nconst GKbody = ({ data }) => {\r\n return (\r\n  <>\r\n   <GKFlag src={data.flag} />\r\n   <GKBodyContainer>\r\n    <GkBodyWrapper>\r\n\r\n     <GKInfo>\r\n      <GKText><span>Native Name:</span> {data.altSpellings.length ? data.altSpellings[1] : \"None\"}</GKText>\r\n      <GKText><span>Capital:</span> {data.capital.length ? data.capital : \"None\"} </GKText>\r\n      <GKText><span>Language:</span> {data.languages[0].name.length ? data.languages[0].name : \"None\"} </GKText>\r\n      <GKText><span>Currency:</span>  ({data.currencies[0].symbol}) {data.currencies[0].name}</GKText>\r\n      <GKText><span>Country Code:</span> {data.callingCodes.length ? data.callingCodes : \"None\"} </GKText>\r\n      <GKText><span>Region:</span> {data.region.length ? data.region : \"Missing\"} </GKText>\r\n      <GKText><span>Area:</span> {(data.area).toLocaleString('en-BD')} </GKText>\r\n      <GKText className=\"borders\"><span>Border(Country):</span>\r\n       <GKBorder>\r\n        {data.borders.length ?\r\n         data.borders.map((data, key) => {\r\n          return (\r\n           <span key={key}> &nbsp;{data},&nbsp;</span>\r\n          )\r\n         }) : \"None\"}\r\n       </GKBorder>\r\n      </GKText>\r\n      <GKText><span>Website Domain:</span> ({data.topLevelDomain.length ? data.topLevelDomain : \"None\"}) </GKText>\r\n      <GKText><span>Time Zones:</span> {data.timezones.length ? data.timezones : \"Missing\"}</GKText>\r\n     </GKInfo>\r\n    </GkBodyWrapper>\r\n   </GKBodyContainer>\r\n  </>\r\n )\r\n}\r\n\r\nexport default GKbody\r\n","import styled from 'styled-components';\r\n\r\nexport const GKContainer = styled.div`\r\n width: 400px;\r\n display: flex;\r\n margin: 0 auto;\r\n flex-direction: column;\r\n`;\r\n\r\nexport const GKHeader = styled.div`\r\nbackground: #34495e;\r\npadding: 1rem;\r\n`;\r\n\r\nexport const GKTitle = styled.h2`\r\n font-size: clamp(1.1rem, 3vw, 1.3rem);\r\n color: #fff;\r\n text-align: center;\r\n margin-bottom: 1rem;\r\n`;\r\n\r\nexport const GKWrapper = styled.div``\r\n\r\nexport const GKHero = styled.div``;\r\n\r\nexport const GKInput = styled.input`\r\n    width: 100%;\r\n    max-width: 100%;\r\n    padding: 4px 0.775rem;\r\n    border: 1px solid #ccc;\r\n    border-radius: 0;\r\n    color: #000000;\r\n    outline: none;\r\n    font-size: 1rem;\r\n    position: relative;\r\n\r\n    &::placeholder{\r\n     \r\n    }\r\n`;\r\n\r\nexport const GKDataList = styled.datalist`\r\n background: #000;\r\n`;\r\n\r\nexport const GKoption = styled.option``\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { GKContext } from '../Context/GKContextApi';\r\nimport GKbody from './GKbody';\r\nimport axios from 'axios';\r\nimport {\r\n   GKContainer,\r\n   GKHeader,\r\n   GKWrapper,\r\n   GKHero,\r\n   GKInput,\r\n   GKDataList,\r\n   GKoption,\r\n   GKTitle\r\n} from './GKElements'\r\n\r\n\r\nconst GKInterface = () => {\r\n\r\n   //Context Api Call\r\n   const { country } = useContext(GKContext);\r\n   //Initialize country name for search\r\n   const [name, setName] = useState([])\r\n   const [ country_name, setContry_name ] = useState('')\r\n\r\n   //Initialize onchange function\r\n   const onChangeHandler =(e)=>{\r\n      e.preventDefault();\r\n       setContry_name(e.target.value)\r\n       console.clear()\r\n   }\r\n\r\n     useEffect(() => {\r\n     axios.get(`https://restcountries.eu/rest/v2/name/${country_name}?fullText=true`)\r\n      .then(res => {\r\n          setName(res.data)\r\n      })\r\n      .catch(err => {\r\n         console.clear(err)\r\n      })\r\n   }, [country_name])\r\n\r\n   return (\r\n      <GKContainer>\r\n         <GKHeader>\r\n            <GKTitle>General Knowledge By County</GKTitle>\r\n            <GKWrapper>\r\n               <GKHero>\r\n                  <GKInput\r\n                     list=\"country\"\r\n                     name=\"country_name\"\r\n                     placeholder=\"Enter country name...\" \r\n                     onChange={ onChangeHandler }\r\n                  />\r\n                  <GKDataList id=\"country\">\r\n                     {country.map((country, key) => {\r\n                        return (\r\n                           <GKoption  key={key} value={country.name} />\r\n                        )\r\n                     })}\r\n                  </GKDataList>\r\n               </GKHero>\r\n            </GKWrapper>\r\n         </GKHeader>\r\n         {/* GK body  */}\r\n        \r\n      { country_name.length ?  name.map((name, key) => {\r\n            return(\r\n               <GKbody key={key} data={name} />\r\n            )\r\n         }):   <span>Select a country for get info</span>}\r\n         \r\n      </GKContainer>\r\n   )\r\n}\r\n\r\nexport default GKInterface\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n*{\r\n margin: 0;\r\n padding: 0;\r\n box-sizing: border-box;\r\n font-family: 'Poppins', sans-serif;\r\n}\r\nspan{\r\n font-weight: 600;\r\n font-size: 1rem !important;\r\n}\r\n\r\n.borders{\r\n display: flex;\r\n}\r\n`;","import './App.css';\nimport GKInterface from './Components';\nimport { GlobalStyle } from './GlobalElements'\nimport GlobalState from './Context/GKContextApi'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalState>\n        <GKInterface />\n        <GlobalStyle />\n      </GlobalState>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('GK_WEB_APPS')\n);\nreportWebVitals();\n"],"sourceRoot":""}